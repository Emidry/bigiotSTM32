#include <stdio.h>
#include <stdarg.h>
#include "stm32f10x.h"
#include "usart2.h"
extern u8 bRxBuffer[1024];
extern u8 bRxCounter;
extern u8 bReceiveState;
const u16 CMD_BUFFER_LEN = 1024;
void USART2_Config(void)
{
GPIO_InitTypeDef GPIO_InitStructure;
USART_InitTypeDef USART_InitStructure;
NVIC_InitTypeDef NVIC_InitStructure;        

RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );
RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE );

GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //USART2 TX;
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //??????;
GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
GPIO_Init(GPIOA, &GPIO_InitStructure); //??A;
    
GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; //USART2 RX;
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //????;
GPIO_Init(GPIOA, &GPIO_InitStructure); //??A;

USART_InitStructure.USART_BaudRate = 9600; //???;
USART_InitStructure.USART_WordLength = USART_WordLength_8b; //???8?;
USART_InitStructure.USART_StopBits = USART_StopBits_1; //???1?;
USART_InitStructure.USART_Parity = USART_Parity_No ; //????;
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
//?????;
USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
//????;
USART_Init(USART2, &USART_InitStructure);//??????;

NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //?????,4??????,4??????;

NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn; //???;
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //?????;
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; //?????;
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
NVIC_Init(&NVIC_InitStructure);

USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
USART_Cmd(USART2, ENABLE); //????;
}

/*发送一个字节数据*/
void UART2SendByte(unsigned char SendData)
{
    USART_SendData(USART2, SendData);
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
}

/*接收一个字节数据*/
unsigned char UART2GetByte(unsigned char* GetData)
{
    if(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET)
    {
        return 0;//没有收到数据
    }
    *GetData = USART_ReceiveData(USART2);
    return 1;//收到数据
}
/*接收一个数据，马上返回接收到的这个数据*/
void UART2Test(void)
{
    unsigned char i = 0;

    while(1)
    {
        while(UART2GetByte(&i))
        {
            USART_SendData(USART1, i);
        }
    }
}
/*printf输出重定向
int fputc(int ch, FILE *f)
{
    USART_SendData(USART2, (unsigned char) ch);
    while(!(USART2->SR & USART_FLAG_TXE));
    return(ch);
}
*/
void USART2_IRQHandler(void)                	//串口1中断服务程序
{
    u8 Clear = Clear;
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
    {
        bRxBuffer[bRxCounter++] = USART2->DR; //(USART1->DR);	//读取接收到的数据
    }
    if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)  //空闲总线中断
    {
        Clear = USART1->SR;
        Clear = USART1->DR; //清除USART_IT_IDLE位
        bReceiveState = 1;
    }
}

void usart2_printf(char *fmt, ...) 
{ 
    char buffer[CMD_BUFFER_LEN+1]; 
    u16 i = 0; 
    va_list arg_ptr; 
    va_start(arg_ptr, fmt);   
    vsnprintf(buffer, CMD_BUFFER_LEN+1, fmt, arg_ptr); 
    while ((i < CMD_BUFFER_LEN) && buffer[i]) 
    { 
            USART_SendData(USART2, (u8) buffer[i++]); 
    while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);  
    } 
    va_end(arg_ptr); 
}

